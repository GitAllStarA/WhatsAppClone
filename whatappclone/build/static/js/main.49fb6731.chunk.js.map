{"version":3,"sources":["Firebase.js","SidebarChat.js","StateProvider.js","SideBar.js","Chat.js","reducer.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarChat","id","name","addNewChat","useState","Seed","setSeed","messages","setmessages","useEffect","Math","floor","random","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","onClick","roomName","prompt","add","className","to","Avatar","src","message","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","SideBar","user","rooms","setRooms","Unsub","photoURL","IconButton","placeholder","room","key","Chat","InputMessage","setInputMessage","roomId","useParams","roomNAME","setroomNAME","Date","length","timestamp","toDate","toUTCString","msg","displayName","format","onChange","e","target","type","preventDefault","console","log","FieldValue","serverTimestamp","actionTypes","state","action","Login","dispatch","Button","signInWithPopup","then","result","catch","error","alert","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.49fb6731.chunk.js","sourcesContent":["import firebase from 'firebase';\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBUxnQAVo-50ZrLLxKmx7WY0qf1DNWLpxU\",\r\n    authDomain: \"whatsapp-clone-right-tickk.firebaseapp.com\",\r\n    databaseURL: \"https://whatsapp-clone-right-tickk.firebaseio.com\",\r\n    projectId: \"whatsapp-clone-right-tickk\",\r\n    storageBucket: \"whatsapp-clone-right-tickk.appspot.com\",\r\n    messagingSenderId: \"102483540482\",\r\n    appId: \"1:102483540482:web:79ac6582f5bb467610451b\",\r\n    measurementId: \"G-F258S1W12M\"\r\n  };\r\n\r\n  const firebaseApp= firebase.initializeApp(firebaseConfig);\r\n\r\n  const db=firebaseApp.firestore();\r\n  const auth=firebase.auth();\r\n  const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n  export {auth, provider};\r\n  export default db;","import React, { useState, useEffect } from 'react'\r\nimport {Avatar ,IconButton} from \"@material-ui/core\"\r\nimport './SidebarChat.css'\r\nimport db from './Firebase';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n  } from \"react-router-dom\";\r\n\r\nfunction SidebarChat({id, name, addNewChat}) {\r\n    const [Seed, setSeed] = useState('');\r\n    const [messages, setmessages] = useState(\"\")\r\n    \r\n    useEffect(() => {\r\n        setSeed(Math.floor(Math.random() * 5031300))\r\n    }, [])\r\n\r\n    const createChat =()=>{\r\n        const roomName = prompt('Please enter name for chat');\r\n        if(roomName) {\r\n            // do some db stuff\r\n            db.collection(\"rooms\").add({\r\n                name: roomName,\r\n            });\r\n        }\r\n    }\r\n    useEffect(() => {\r\n     if(id) {\r\n         db.collection(\"rooms\")\r\n            .doc(id).collection(\"messages\")\r\n            .orderBy('timestamp','desc')\r\n            .onSnapshot((snapshot) => \r\n                setmessages(snapshot.docs.map((doc) => doc.data())))\r\n     }\r\n    }, [id])\r\n\r\n    return !addNewChat ? (\r\n        <Link to={`/rooms/${id}`}>\r\n        <div className=\"sidebarChat\">\r\n          <Avatar src={`https://avatars.dicebear.com/api/male/${Seed}.svg`}/>  \r\n          <div className=\"sideBarChat__info\">\r\n                <h2>{name}</h2>\r\n                <p>{messages[0]?.message}</p>\r\n            </div>\r\n        </div>\r\n        </Link>\r\n    ) \r\n    : \r\n    (\r\n        <div onClick={createChat} \r\n            className=\"sidebarChat\">\r\n                <h2>Add New Chat</h2>\r\n        </div>\r\n    )   \r\n}\r\n\r\nexport default SidebarChat\r\n","import  React, { createContext, useContext, useReducer } from \"react\";\r\n\r\nexport const StateContext = createContext();\r\nexport const StateProvider = ({reducer , initialState, children})=>(\r\n    <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n        {children}\r\n    </StateContext.Provider>\r\n);\r\nexport const useStateValue = () => useContext(StateContext)","import React, {useEffect,useState} from 'react'\r\nimport \"./SideBar.css\"\r\nimport SearchOutlinedIcon from '@material-ui/icons/Search';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport {Avatar ,IconButton} from \"@material-ui/core\"\r\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport SidebarChat from './SidebarChat.js';\r\nimport db from './Firebase';\r\n\r\n\r\nimport {useStateValue} from \"./StateProvider\"\r\n\r\n\r\nfunction SideBar() {\r\n    \r\nconst [{user}, dispatch] = useStateValue();\r\n    const [rooms, setRooms] = useState([]);\r\n     useEffect(() => {\r\n       const Unsub =  db.collection('rooms').onSnapshot(snapshot => setRooms(\r\n                   snapshot.docs.map(doc => ( {\r\n                       id: doc.id,\r\n                       data: doc.data(),\r\n                   }))\r\n               )\r\n         );\r\n         return () => {\r\n             Unsub();\r\n         }\r\n     },[]);\r\n    \r\n        return (\r\n            <div className=\"sidebar\">\r\n                <div className=\"sidebar__header\">\r\n                    <Avatar src={user?.photoURL}/>\r\n                        <div className=\"header__right\"></div>\r\n                            <IconButton>  \r\n                                <DonutLargeIcon/>\r\n                            </IconButton> \r\n                            <IconButton>  \r\n                                <ChatIcon/>                \r\n                            </IconButton> \r\n                            <IconButton>     \r\n                                <MoreVertIcon/>\r\n                            </IconButton>   \r\n                </div>\r\n                <div className=\"sidebar__search\">\r\n                    <div className=\"sidebar__search_container\">\r\n                        <SearchOutlinedIcon/>\r\n                    <input placeholder='search or start new chat'/>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div className=\"sidebar_chats\">\r\n                    <SidebarChat addNewChat/>\r\n                    {rooms.map(room=>(\r\n                        <SidebarChat key={room.id} id={room.id} name={room.data.name} />\r\n                    ))}  \r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default SideBar\r\n","import React, { useState,useEffect } from 'react'\r\nimport './Chat.css'\r\nimport {Avatar,IconButton} from \"@material-ui/core\"\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport {useParams} from \"react-router-dom\";\r\nimport db from './Firebase';\r\nimport Moment from 'react-moment';\r\nimport firebase from 'firebase'\r\nimport {useStateValue} from \"./StateProvider\"\r\n\r\n\r\nfunction Chat() {\r\n    \r\n    const [Seed, setSeed] = useState(\"\")\r\n    const [InputMessage, setInputMessage] = useState(\"\")\r\n    const {roomId} = useParams();\r\n    const [roomNAME, setroomNAME] = useState(\"\")\r\n    const [messages, setmessages] = useState([])\r\n    const [{user}, dispatch] = useStateValue();\r\n\r\n\r\n    //Setting room name\r\n    useEffect(() => {\r\n     if(roomId){\r\n         db.collection('rooms').doc(roomId).onSnapshot(snapshot => (\r\n             setroomNAME(snapshot.data().name)\r\n         ))     \r\n         db.collection('rooms').doc(roomId).\r\n         collection(\"messages\").orderBy\r\n         ('timestamp','asc').onSnapshot(snapshot  => (\r\n                setmessages(snapshot.docs.map(doc => doc.data()))\r\n                ) )\r\n        }\r\n    }, [roomId])\r\n\r\n    useEffect(() => {\r\n      setSeed(Math.floor(Math.random() * 5000))\r\n    }, [roomId])\r\n    \r\n    const sendMessage = (e) => {\r\n                e.preventDefault();\r\n                console.log(\"your message >>>>>\", InputMessage);\r\n                \r\n    db.collection(\"rooms\").doc(roomId).collection(\"messages\").add({\r\n        message:InputMessage,\r\n        name: user.displayName,\r\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n                \r\n                setInputMessage(\"\");\r\n\r\n    };\r\n\r\n    return (\r\n        <div className=\"Chat\">\r\n            <div className=\"chat__header\">\r\n                <Avatar src={`https://avatars.dicebear.com/api/male/${Seed}.svg`}/>\r\n                <div className=\"Chat__Header__info\">\r\n                    <h3>{roomNAME}</h3>\r\n                    <p>\r\n                        last seen {\" \"}\r\n                        {new Date(\r\n                            messages[messages.length - 1]?.\r\n                            timestamp?.toDate()\r\n                            ).toUTCString()}\r\n                    </p>\r\n                </div>\r\n                <div className=\"chat_header_right\">\r\n                            <IconButton>  \r\n                                <SearchIcon/>\r\n                            </IconButton> \r\n                            <IconButton>  \r\n                                <AttachFileIcon/>                \r\n                            </IconButton> \r\n                            <IconButton>     \r\n                                <MoreVertIcon/>\r\n                            </IconButton> \r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"chat__body\">\r\n                      {messages.map(msg =>(\r\n                          <p className={`Chat_message ${msg.name === user.displayName && 'Chat_receiver'} `}>\r\n                            <span className=\"Chat_Name\">{msg.name}</span>\r\n                            {msg.message}\r\n                      <span className=\"Chat_TimeStamp\"><Moment format=\"YYYY/MM/DD\">{new Date(msg.timestamp?.toDate()).toUTCString()}</Moment></span>\r\n                        </p>\r\n                      ) )}                     \r\n            </div>\r\n            <div className=\"chat__footer\">\r\n                <InsertEmoticonIcon/>\r\n                <form>\r\n                    <input value = {InputMessage} onChange={ (e) => setInputMessage(e.target.value)} type=\"text\" placeholder=\"Type a message\"/>\r\n                    <button onClick={sendMessage} type=\"submit\">send a message</button>\r\n                </form>\r\n                <MicIcon/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","export const initialState = {\r\n    user: null,\r\n};\r\n\r\nexport const actionTypes = {\r\n    SET_USER: \"SET_USER\",\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n    console.log(action);\r\n    switch(action.type) {\r\n        case actionTypes.SET_USER:\r\n            return {\r\n                ...state,\r\n                user: action.user,\r\n            };\r\n            \r\n            default:\r\n                return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import React from 'react'\r\nimport './Login.css'\r\nimport {Button} from '@material-ui/core'\r\nimport {auth, provider} from './Firebase'\r\nimport {useStateValue} from \"./StateProvider\"\r\nimport { actionTypes } from './reducer'\r\n\r\nfunction Login() {\r\n    const [{}, dispatch] = useStateValue();\r\n    const signIn = () => {\r\n        auth.signInWithPopup(provider)\r\n        .then(result => {\r\n            dispatch({\r\n                type: actionTypes.SET_USER,\r\n                user:result.user,\r\n            })\r\n        })\r\n        .catch(error=> alert(error.message));\r\n    };\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login__container\">\r\n                <img src=\"https://upload.wikimedia.org/wikipedia/commons/6/6b/WhatsApp.svg\"/>\r\n                <div className=\"login__text\">\r\n                    <h1>Sign in to WhatsApp</h1>\r\n                </div>\r\n                <Button onClick={signIn}>\r\n                    Sign in with Google\r\n                </Button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React , {useState} from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport './App.css';\nimport SideBar from './SideBar';\nimport Chat from './Chat'\nimport Login from './Login';\nimport {useStateValue} from \"./StateProvider\"\n\n\nfunction App() {\nconst [{user}, dispatch] = useStateValue();\n return (\n    // BEM naming convention\n    <div className=\"App\">\n      {! user ? (\n        <Login/>\n      ):(<div className=\"app__body\"> \n              \n            <Router>\n              <SideBar/> \n              {/* <Route exact path=\"/\" component={Chat}/> */}\n              <Route exact path=\"/rooms/:roomId\" component={Chat}/>\n            </Router>\n\n     </div>\n)}\n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"," import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reducer, {initialState} from \"./reducer\"\nimport StateContext, {StateProvider} from \"./StateProvider\"\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n        <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}